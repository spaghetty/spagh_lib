# -*- ruby -*-

GIT_REPO="serv_tree"

require "lib/hdesc.rb"

desc "Task for basic config file creation"
task :base_conf do
  sh "touch .config"
end

desc "Task base per inizializzare il sistema di controllo"
task :init, :repo do |t,args|
  rep = args.repo
  if rep and not File.exist? "#{GIT_REPO}/.git"
    sh "git clone #{rep} #{GIT_REPO}"
  else
    if not File.exist?("#{GIT_REPO}/.git")
      sh "git init #{GIT_REPO}"
    end
  end
    Rake::Task[:base_conf].invoke
end


desc "Start Controlling new host, type can be ssh or sshey"
task :add_host, [ :ip, :conn_type, :user ]=> ["#{GIT_REPO}", "lib"] do |t, args|
  sh "mkdir #{GIT_REPO}/#{args.ip}"
  sh "echo '#{args.ip}:#{args.conn_type}:#{args.user}'>>#{GIT_REPO}/#{args.ip}/.ecatonchiro"
end

desc "Aggiungi un alias per un host"
task :add_alias, [ :ip, :alias ] do |t, args|
  sh "ln -s #{args.ip} #{GIT_REPO}/#{args.alias}"
end

desc "Rimuovi un alias per un host"
task :del_alias, [ :alias ] do |t, args|
  sh "rm #{GIT_REPO}/#{args.alias}"
end

desc "Remove host from be controlled"
task :del_host, [ :ip ] do |t, args|
  sh "rm -rf #{GIT_REPO}/#{args.ip}"
end
  

desc "Choose a ssh_key for specific host"
task :save_key, [ :ip, :key_file ] => [ "#{GIT_REPO}/" ] do |t, args|
  sh "cp #{args.key_file} #{GIT_REPO}/#{args.ip}/.ssh_key"
end 


desc "List all managed host"
task :list => [ "#{GIT_REPO}" ] do 
  Dir.foreach("#{GIT_REPO}") do | x | 
    if File.directory? File.join(GIT_REPO, x) and not x[0].chr=='.' 
      if File.symlink? File.join(GIT_REPO, x) 
        puts "#{x} --> #{File.readlink(File.join(GIT_REPO, x))}"
      else
        puts "#{x}"
      end
    end
  end
end


desc "acquire file from remote server with root permission"
task :acquire_as_root, [ :ip, :path, :selector] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  if not File.exists? "#{GIT_REPO}/#{args.ip}#{args.path}"
    Dir.mkdir("#{GIT_REPO}/#{args.ip}#{args.path}")
  end
  sh "scp -r #{h.get_ssh_string}:#{args.path}#{args.selector} #{GIT_REPO}/#{args.ip}#{args.path}"
end

desc "push file to remote server as root"
task :push_as_root, [ :ip, :path, :selector] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  if File.exists? "#{GIT_REPO}/#{args.ip}#{args.path}"
    sh "scp -r #{GIT_REPO}/#{args.ip}#{args.path}#{args.selector} #{h.get_ssh_string}:#{args.path}"
  end
end

desc "execute command on remote machine"
task :execute_as_root, [ :ip, :command ] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  sh "ssh #{h.get_ssh_string} \"#{args.command}\""
end

desc "acquire file from remote server"
task :acquire, [ :ip, :path, :selector] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  if h.need_sudo?
    puts "we still don't manage sudo based stuff"
  else
    Rake::Task[:acquire_as_root].invoke(args.ip, args.path, args.selector)
  end
end

desc "acquire file from remote server"
task :push, [ :ip, :path, :selector] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  if h.need_sudo?
    puts "we still don't manage sudo based stuff"
  else
    Rake::Task[:push_as_root].invoke(args.ip, args.path, args.selector)
  end
end

desc "acquire file from remote server"
task :execute, [ :ip, :command ] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  if h.need_sudo?
    puts "we still don't manage sudo based stuff"
  else
    Rake::Task[:execute_as_root].invoke(args.ip, args.command)
  end
end

desc "restart dhcp services"
task :dhcpd_restart, [ :ip ] do |t, args|
  Rake::Task[:execute].invoke(args.ip, "service dhcpd restart")
end
  
desc "ssh session"
task :ssh, [ :ip ] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  sh "ssh #{h.get_ssh_string}"
end
