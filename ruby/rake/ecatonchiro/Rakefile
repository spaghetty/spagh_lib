# -*- ruby -*-

GIT_REPO="serv_tree"

require "lib/hdesc.rb"

import "lib/GitRake.rb"

Dir.glob('serv_tree/.tasks/*.rake').each { |r| import r }

task :base_conf do
  sh "touch .config"
  sh "mkdir .git_repos"
end

desc "Task base per inizializzare il sistema di controllo"
task :init, :repo do |t,args|
  rep = args.repo
  if rep and not File.exist? "#{GIT_REPO}/.git"
    sh "git clone #{rep} #{GIT_REPO}"
  else
    if not File.exist?("#{GIT_REPO}/.git")
      sh "git init #{GIT_REPO}"
    end
  end
    Rake::Task[:base_conf].invoke
end

desc "Start Controlling new host, type can be ssh or sshey"
task :add_host, [ :ip, :conn_type, :user, :passwd ]=> ["#{GIT_REPO}", "lib"] do |t, args|
  sh "mkdir #{GIT_REPO}/#{args.ip}"
  sh "echo '#{args.ip}:#{args.conn_type}:#{args.user}:#{args.passwd}'>>#{GIT_REPO}/#{args.ip}/.ecatonchiro"
end

desc "Aggiungi un alias per un host"
task :add_alias, [ :ip, :alias ] do |t, args|
  sh "ln -s #{args.ip} #{GIT_REPO}/#{args.alias}"
end

desc "Rimuovi un alias per un host"
task :del_alias, [ :alias ] do |t, args|
  sh "rm #{GIT_REPO}/#{args.alias}"
end

desc "Remove host from be controlled"
task :del_host, [ :ip ] do |t, args|
  sh "rm -rf #{GIT_REPO}/#{args.ip}"
end

desc "Change passphrase for key file"
task :change_key, [ :ip ] do |t, args|
  sh "ssh-keygen -p -f #{GIT_REPO}/#{args.ip}/.ssh_key"
end

desc "Choose a ssh_key for specific host"
task :save_key, [ :ip, :key_file ,:change] => [ "#{GIT_REPO}/" ] do |t, args|
  sh "cp #{args.key_file} #{GIT_REPO}/#{args.ip}/.ssh_key"
  sh "chmod 0600 #{GIT_REPO}/#{args.ip}/.ssh_key"
  if args.change=="yes"
    Rake::Task[:change_key].invoke(args.ip)
  end  
end 

desc "List all managed host"
task :list => [ "#{GIT_REPO}" ] do 
  Dir.foreach("#{GIT_REPO}") do | x | 
    if File.directory? File.join(GIT_REPO, x) and not x[0].chr=='.' 
      if File.symlink? File.join(GIT_REPO, x) 
        puts "#{x} --> #{File.readlink(File.join(GIT_REPO, x))}"
      else
        puts "#{x}"
      end
    end
  end
end

task :acquire_as_root, [ :ip, :path, :selector] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  if not File.exists? "#{GIT_REPO}/#{args.ip}#{args.path}"
    sh "mkdir -p #{GIT_REPO}/#{args.ip}#{args.path}"
  end
  sh "#{h.get_scp_complete} #{h.get_ssh_string}:#{args.path}#{args.selector} #{GIT_REPO}/#{args.ip}#{args.path}"
end


task :push_as_root, [ :ip, :path, :selector] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  if File.exists? "#{GIT_REPO}/#{args.ip}#{args.path}"
    sh "#{h.get_scp_complete} #{GIT_REPO}/#{args.ip}#{args.path}#{args.selector} #{h.get_ssh_string}:#{args.path}"
  end
end

task :execute_as_root, [ :ip, :command ] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  sh "#{h.get_ssh_complete} \"#{args.command}\""
end

desc "acquire file from remote server"
task :acquire, [ :ip, :path, :selector] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  if h.need_sudo?
    puts "we still don't manage sudo based stuff"
    Rake::Task[:acquire_as_root].invoke(args.ip, args.path, args.selector)
  else
    Rake::Task[:acquire_as_root].invoke(args.ip, args.path, args.selector)
  end
end

desc "acquire file from remote server"
task :push, [ :ip, :path, :selector] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  if h.need_sudo?
    puts "we still don't manage sudo based stuff"
  else
    Rake::Task[:push_as_root].invoke(args.ip, args.path, args.selector)
  end
end

desc "acquire file from remote server"
task :execute, [ :ip, :command ] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  if h.need_sudo?
    puts "we still don't manage sudo based stuff"
  else
    Rake::Task[:execute_as_root].invoke(args.ip, args.command)
  end
end

desc "ssh session"
task :ssh, [ :ip ] do |t, args|
  h = HostDescriptor.find_by_ip(args.ip)
  sh "#{h.get_ssh_complete}"

end
