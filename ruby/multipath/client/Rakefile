class IpAddr
  attr_accessor :ip, :cdir, :netmask, :gw

  def initialize(net)
    tmp = net.split('/')
    @ip = tmp[0] if tmp[0]
    @cdir = tmp[1].to_i if tmp[1]
    @netmaks = ""
    @gw = ""
    maskcalc()
 end

  def cdir2mask()
    base = 0xffffffff
    mask = (base << (32-@cdir)) & base
    res = []
    res[3] = ( mask >> (8*0)) & 0x000000ff
    res[2] = ( mask >> (8*1)) & 0x000000ff
    res[1] = ( mask >> (8*2)) & 0x000000ff
    res[0] = ( mask >> (8*3)) & 0x000000ff
    res
  end

  def maskcalc()
    base = 0xffffffff
    mask = (base << (32-@cdir)) & base
    p4 = ( mask >> (8*0)) & 0x000000ff
    p3 = ( mask >> (8*1)) & 0x000000ff
    p2 = ( mask >> (8*2)) & 0x000000ff
    p1 = ( mask >> (8*3)) & 0x000000ff
    @netmask = "#{p1}.#{p2}.#{p3}.#{p4}"
  end

  def get_cdir()
    return "#{@ip}/#{@cdir}"
  end
  
  def get_net()
    #tmp = @ip.sub(/\.\d{1,3}$/,".0")
    maskset = cdir2mask
    tmp = @ip.split('.')
    (0..3).each do |key|
      tmp[key] = tmp[key].to_i & maskset[key]
    end
    tmp = tmp.join(".")
    return "#{tmp}/#{@cdir}"
  end

  def inspect
    return "#{@ip} -- #{@netmask} -- #{@cdir}"
  end
end

desc "test"
task :test do
  ipad = IpAddr.new("192.168.64.1/16")
  puts ipad.get_net()
end

desc "set up interface table for specific nic"
task :setup, [:nic,:is_default] do |t, args|
  result = %x[ip addr show dev #{args[:nic]}| grep 'inet ']
  result =~ /inet (.*\/\d{1,2})/
  gw = %x[route -n | grep #{args[:nic]} | grep "^0.0.0.0" | awk '{ print $2 }'].strip
  %x[sudo route del -net 0.0.0.0 gw #{gw} dev #{args[:nic]}] if !args.to_hash.key?(:is_default)
  b_ro = "sudo ip route add"
  b_ru = "sudo ip rule add"
  tn = (args[:nic].reverse.to_i)
  ipad = IpAddr.new $1
  ipad.gw = "#{gw}"
  #sh "sudo echo '20#{tn} T#{tn}' >> /etc/iproute2/rt_tables"
  sh "#{b_ro} #{ipad.get_net} dev #{args[:nic]} src #{ipad.ip} table 20#{tn}"
  sh "#{b_ro} default via #{ipad.gw} table 20#{tn}"
  sh "#{b_ru} from #{ipad.ip} table 20#{tn}"
  puts ipad.inspect
end
